#pragma once

#include "Command.h"
#include "SipmRegister.h"

INDEXED_ENUM(SipmControlReadCommand,
    HV_ENABLE,                  
    MODE,                       
    V_TARGET_WRITE,             
    RAMP_SPEED,                 
    MAX_V,                      
    MAX_I,                      
    C_TEMP_M2,                  
    C_TEMP_M,                   
    C_TEMP_Q,                   
    ALFA_VOUT,	                
    ALFA_IOUT,	                
    ALFA_VREF,	                
    ALFA_TREF,	                
    TCOEF,                      
    LUT_ENABLE,                 
    ENABLE_PI,                  
    LUT_ADDRESS,                
    LUT_PROGRAM_TEMPERATURE,    
    LUT_PROGRAM_OUTPUT_VALUE,   
    LUT_LENGTH,                 
    I2C_BASE_ADDRESS,           
    CURRENT_RANGE,              
    PIN_STATUS,                 
    VIN,                        
    VOUT,	                    
    IOUT,	                    
    VREF,	                    
    TREF,	                    
    V_TARGET_READ,              
    R_TARGET,                   
    CVT,                        
    COMPLIANCE_V,               
    COMPLIANCE_I,               
    PRODUCT_CODE,               
    FW_VERSION,                 
    HW_VERSION,                 
    SERIAL_NUMBER              
)

constexpr static auto SipmControlReadTable = CommandEnumTable<SipmControlReadCommandIndexer>::make_table(
    std::tuple(SipmControlReadCommand::HV_ENABLE,                  "HV_ENABLE",                 DataFormatTypes{DataFormat::Bool }),
    std::tuple(SipmControlReadCommand::MODE,                       "MODE",                      DataFormatTypes{DataFormat::Int  }),
    std::tuple(SipmControlReadCommand::V_TARGET_WRITE,             "V_TARGET_WRITE",            DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::RAMP_SPEED,                 "RAMP_SPEED",                DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::MAX_V,                      "MAX_V",                     DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::MAX_I,                      "MAX_I",                     DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::C_TEMP_M2,                  "C_TEMP_M2",                 DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::C_TEMP_M,                   "C_TEMP_M",                  DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::C_TEMP_Q,                   "C_TEMP_Q",                  DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::ALFA_VOUT,	                "ALFA_VOUT",	            DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::ALFA_IOUT,	                "ALFA_IOUT",	            DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::ALFA_VREF,	                "ALFA_VREF",	            DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::ALFA_TREF,	                "ALFA_TREF",	            DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::TCOEF,                      "TCOEF",                     DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::LUT_ENABLE,                 "LUT_ENABLE",                DataFormatTypes{DataFormat::Bool }),
    std::tuple(SipmControlReadCommand::ENABLE_PI,                  "ENABLE_PI",                 DataFormatTypes{DataFormat::Bool }),
    std::tuple(SipmControlReadCommand::LUT_ADDRESS,                "LUT_ADDRESS",               DataFormatTypes{DataFormat::Int  }),
    std::tuple(SipmControlReadCommand::LUT_PROGRAM_TEMPERATURE,    "LUT_PROGRAM_TEMPERATURE",   DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::LUT_PROGRAM_OUTPUT_VALUE,   "LUT_PROGRAM_OUTPUT_VALUE",  DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::LUT_LENGTH,                 "LUT_LENGTH",                DataFormatTypes{DataFormat::Int  }),
    std::tuple(SipmControlReadCommand::I2C_BASE_ADDRESS,           "I2C_BASE_ADDRESS",          DataFormatTypes{DataFormat::Int  }),
    std::tuple(SipmControlReadCommand::CURRENT_RANGE,              "CURRENT_RANGE",             DataFormatTypes{DataFormat::Int  }),
    std::tuple(SipmControlReadCommand::PIN_STATUS,                 "PIN_STATUS",                DataFormatTypes{DataFormat::Int  }),
    std::tuple(SipmControlReadCommand::VIN,                        "VIN",                       DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::VOUT,	                    "VOUT",	                    DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::IOUT,	                    "IOUT",	                    DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::VREF,	                    "VREF",	                    DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::TREF,	                    "TREF",	                    DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::V_TARGET_READ,              "V_TARGET_READ",             DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::R_TARGET,                   "R_TARGET",                  DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::CVT,                        "CVT",                       DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::COMPLIANCE_V,               "COMPLIANCE_V",              DataFormatTypes{DataFormat::Bool }),
    std::tuple(SipmControlReadCommand::COMPLIANCE_I,               "COMPLIANCE_I",              DataFormatTypes{DataFormat::Bool }),
    std::tuple(SipmControlReadCommand::PRODUCT_CODE,               "PRODUCT_CODE",              DataFormatTypes{DataFormat::Int  }),
    std::tuple(SipmControlReadCommand::FW_VERSION,                 "FW_VERSION",                DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::HW_VERSION,                 "HW_VERSION",                DataFormatTypes{DataFormat::Float}),
    std::tuple(SipmControlReadCommand::SERIAL_NUMBER,              "SERIAL_NUMBER",             DataFormatTypes{DataFormat::Int  })
);

CommandClass(SipmControlRead);
